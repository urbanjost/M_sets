intersect (3m_sets)  - [M_sets] return intersect values in array A
ismember (3m_sets)   - [M_sets] return ismember values in array A
issorted (3m_sets)   - [M_sets] Report if A is sorted in ascending order or not.
M_sets (3m_sets)     - [M_sets::INTRO] functions reminiscent of Matlab set functions
setdiff (3m_sets)    - [M_sets] return setdiff values in array A
settheory (1)	     - [FUNIX:FILESYSTEM] find the pathname of commands and optionally perform commands on them. (LICENSE:MIT)
setxor (3m_sets)     - [M_sets] return setxor values in array A
union (3m_sets)      - [M_sets] return union values in array A
unique (3m_sets)     - [M_sets] return unique values in array A
settheory.1.man(1m_sets)			      settheory.1.man(1m_sets)



NAME
  settheory(1f) - [FUNIX:FILESYSTEM] find the pathname of commands and
  optionally perform commands on them.	(LICENSE:MIT)


SYNOPSIS
  settheory -a INTEGER_SET_ONE -b INTEGER_SET_TWO

DESCRIPTION
  settheory(1f) finds the union, intersection, and setdiff of two small sets
  of integers and displays them

  If any set is empty a simple example is run.

OPTIONS
  -a SET_ONE
    vector of whole numbers or strings comprising set A. May be delimited by
    commas, spaces, or colons. If spaces are used the set needs quoted. If
    empty a test set is run.

  -b SET_TWO
    vector of whole numbers or strings comprising set B. May be delimited by
    commas, spaces, or colons. If spaces are used the set needs quoted. If
    empty a test set is run.

  --type DATATYPE
    May be "integer" or "character". Defaults to "character".

  --setorder
    "sorted" or "stable". If "stable" the values remain in the order input.

  --verbose
    add additional descriptive text

  --version,-v
    Print version information on standard output then exit successfully.

  --help,-h
    Print usage information on standard output then exit successfully.

RESULTS
  Outputs the results from the following calls to the M_set(3f) module

    •  unique(A,setOrder);unique(B,setOrder) - Unique values in each array

    •  union(A,B,setOrder) - Set union of two arrays

    •  intersect(A,B,setOrder) - Set intersection of two arrays

    •  setdiff(A,B,setOrder) - Set difference of two arrays

    •  ismember(A,B) - Array elements of set B that are members of set A array

    •  setxor(A,B,setOrder) - Set exclusive OR of two arrays

EXAMPLE
  Sample commands

      settheory -a one,two,three -b four,two,five,three
      A 	   :  one   two   three
      B 	   :  four  two   five	three
      UNIQUE	   :  one   three two	, five	four  three two
      UNION	   :  five  four  one	three two
      INTERSECT    :  three two
      SETDIFF	   :  one
      ISMEMBER	   :  0 1 1
      SETXOR	   :  five  four  one

      settheory -a 7,23,14,15,9,12,8,24,35 -b 2,5,7,8,14,16,25,35,27 \
		-type integer
      A 	   :  7 23 14 15 9 12 8 24 35
      B 	   :  2 5 7 8 14 16 25 35 27
      UNIQUE	   :  7 8 9 12 14 15 23 24 35 , 2 5 7 8 14 16 25 27 35
      UNION	   :  2 5 7 8 9 12 14 15 16 23 24 25 27 35
      INTERSECT    :  7 8 14 35
      SETDIFF	   :  9 12 15 23 24
      ISMEMBER	   :  1 0 1 0 0 0 1 0 1
      SETXOR	   :  2 5 9 12 15 16 23 24 25 27
      # or
      settheory -a '7 23 14 15 9 12 8 24 35' -b '2 5 7 8 14 16 25 35 27'
      # or
      settheory -a 7:23:14:15:9:12:8:24:35 -b 2:5:7:8:14:16:25:35:27


SEE ALSO
  diff(1),uniq(1),sort(1),comm(1),join(1)



			       October 04, 2024       settheory.1.man(1m_sets)
ismember(3m_sets)					     ismember(3m_sets)



NAME
  ismember(3f) - [M_sets] return ismember values in array A


SYNOPSIS
  ismember(A,B)

DESCRIPTION
  Array elements that are members of set array.
    C = ismember(A,B) returns an array containing "logical" 1 (true) where the
    data in A is found in B. Elsewhere, the array contains "logical" 0
    (false).

OPTIONS
  A input array

  B input array

RETURNS
   C
EXAMPLE
  sample program:

     program demo_ismember
     use M_sets, only: ismember
     character(len=*),parameter :: g='(*(g0,1x))'
     integer, allocatable      :: A(:)
     integer, allocatable      :: B(:)

	write(*,g) 'ISMEMBER', 'Determine which elements of A are also in B.'

	 A=[5,3,4,2]
	 B=[2,4,4,4,6,8]
	 write(*,g) 'A=', A
	 write(*,g) 'B=', B
	 write(*,g) ismember(A,B)

     end program demo_ismember

  Results:

   > ISMEMBER Determine which elements of A are also in B.
   > A= 5 3 4 2
   > B= 2 4 4 4 6 8
   > 0 0 1 1


AUTHORS
  John S. Urban, 2023-07-20

LICENSE
  CC0-1.0



			       October 04, 2024 	     ismember(3m_sets)
M_sets(3m_sets) 					       M_sets(3m_sets)



NAME
  M_sets(3f) - [M_sets::INTRO] functions reminiscent of Matlab set functions


SYNOPSIS
  Procedure names and syntax:

      use M_sets, only : & union, unique, intersect, setdiff, ismember, setxor


DESCRIPTION
  Unions, intersection, and set membership

  A small subset of set functions reminiscent of Matlab set functions. They
  currently just work with vectors of default integer and character type input
  and return sets but not the subscripts of the original elements.

  It basically uses some simple calls to the M_ordersort(3f) module to provide
  the functionality. They are not tuned for performance and make loose use of
  memory allocation and space but are sufficient for most use.

  Set operations compare the elements in two sets to find commonalities or
  differences. Currently the sets are arrays of integer numbers or character
  strings.

  ## Functions

    •  union(A,B,setOrder) - Set union of two arrays

    •  unique(A,setOrder) - Unique values in array

    •  intersect(A,B,setOrder) - Set intersection of two arrays

    •  setdiff(A,B,setOrder) - Set difference of two arrays

    •  ismember(A,B,setOrder) - Array elements that are members of set array

    •  setxor(A,B,setOrder) - Set exclusive OR of two arrays

    •  issorted(A) - test if elements are in ascending order

EXAMPLE
  sample program:

     program demo_M_sets
     use M_sets, only: unique, intersect, union, setdiff, ismember, setxor, issorted
     character(len=*),parameter :: g='(*(g0,1x))'
     integer, allocatable      :: A(:)
     integer, allocatable      :: B(:)
     integer, allocatable      :: C(:)

	write(*,g) 'UNIQUE','Find the unique elements of vector A.'
	 A = [10, -10, 0, 1, 2, 3, 3, 2, 1, -10]
	 write(*,g) 'A=', A
	 write(*,g) unique(A)
	 write(*,g) unique(A, setOrder='stable')
	write(*,g) 'UNION', 'Find the union of vectors A and B.'
	 call setab( [5, 7, 1], [3, 1, 1] )
	 write(*,g) union(A,B)
	 call setab( [5, 5, 3], [1, 2, 5] )
	 write(*,g) union(A, B, 'sorted')
	 write(*,g) union(A, B, 'stable')
	write(*,g) 'INTERSECT', 'Find the values common to both A and B.'
	 call setab( [7, 1, 7, 7, 4], [7, 0, 4, 4, 0] )
	 write(*,g) intersect(A, B)
	 write(*,g) intersect(A, B, setOrder='stable')
	write(*,g) 'SETDIFF','Find the values in A that are not in B.'
	 call setab( [3, 6, 2, 1, 5, 1, 1], [2, 4, 6] )
	 write(*,g) setdiff(A, B)
	 call setab( [4, 1, 3, 2, 5], [2, 1])
	 write(*,g) setdiff(A, B, 'sorted')
	 write(*,g) setdiff(A, B, 'stable')
	write(*,g) 'ISMEMBER', 'Determine which elements of A are also in B.'
	 call setab( [5,3,4,2], [2,4,4,4,6,8] )
	 write(*,g) ismember(A,B)
	write(*,g) 'SETXOR','Find values of A and B not in their intersection.'
	 call setab( [5,1,3,3,3], [4,1,2] )
	 write(*,g) setxor(A,B)
	 write(*,g) setxor(A,B,'stable')

	 write(*,g) 'ISSSORTED','confirm whether array is sorted in ascending order or not'
	 call setab([1,2,3,4,5],[5,4,3,2,1])
	 write(*,g) issorted(A)
	 write(*,g) issorted(B)

     contains
     subroutine setab(ain,bin)
     integer,intent(in) :: ain(:)
     integer,intent(in) :: bin(:)
	A=ain
	B=bin
	write(*,g) 'A=', A
	write(*,g) 'B=', B
     end subroutine setab

     end program demo_M_sets

  Results:

   > UNIQUE Find the unique elements of vector A.
   > A= 10 -10 0 1 2 3 3 2 1 -10
   > -10 0 1 2 3 10
   > 10 -10 0 1 2 3
   > UNION Find the union of vectors A and B.
   > A= 5 7 1
   > B= 3 1 1
   > 1 3 5 7
   > A= 5 5 3
   > B= 1 2 5
   > 1 2 3 5
   > 5 3 1 2
   > INTERSECT Find the values common to both A and B.
   > A= 7 1 7 7 4
   > B= 7 0 4 4 0
   > 4 7
   > 7 4
   > SETDIFF Find the values in A that are not in B.
   > A= 3 6 2 1 5 1 1
   > B= 2 4 6
   > 1 3 5
   > A= 4 1 3 2 5
   > B= 2 1
   > 3 4 5
   > 4 3 5
   > ISMEMBER Determine which elements of A are also in B.
   > A= 5 3 4 2
   > B= 2 4 4 4 6 8
   > 0 0 1 1
   > SETXOR Find values of A and B not in their intersection.
   > A= 5 1 3 3 3
   > B= 4 1 2
   > 2 3 4 5
   > 5 3 4 2


AUTHORS
  John S. Urban, 2023-07-20

LICENSE
  CC0-1.0



			       October 04, 2024 	       M_sets(3m_sets)
setdiff(3m_sets)					      setdiff(3m_sets)



NAME
  setdiff(3f) - [M_sets] return setdiff values in array A


SYNOPSIS
  setdiff(A,B, setOrder)

DESCRIPTION
  Set difference of two arrays.
    C = setdiff(A,B) returns the data in A that is not in B, with no
    repetitions. C is in sorted order by default.

OPTIONS
  A input array

  B input array

  setOrder
    May be "sort" or "stable"

EXAMPLE
  sample program:

     program demo_setdiff
     use M_sets, only: setdiff
     character(len=*),parameter :: g='(*(g0,1x))'
     integer, allocatable      :: A(:)
     integer, allocatable      :: B(:)

	write(*,g) 'SETDIFF','Find the values in A that are not in B.'
	 A=[3, 6, 2, 1, 5, 1, 1]
	 B=[2, 4, 6]
	 write(*,g) 'A=', A
	 write(*,g) 'B=', B
	 write(*,g) setdiff(A, B)
	 write(*,g) setdiff([4, 1, 3, 2, 5], [2, 1], 'sorted')
	 write(*,g) setdiff([4, 1, 3, 2, 5], [2, 1], 'stable')

     end program demo_setdiff

  Results:

   > SETDIFF Find the values in A that are not in B.
   > A= 3 6 2 1 5 1 1
   > B= 2 4 6
   > 1 3 5
   > 3 4 5
   > 4 3 5


AUTHORS
  John S. Urban, 2023-07-20

LICENSE
  CC0-1.0



			       October 04, 2024 	      setdiff(3m_sets)
setxor(3m_sets) 					       setxor(3m_sets)



NAME
  setxor(3f) - [M_sets] return setxor values in array A


SYNOPSIS
  setxor(A,B, setOrder)

DESCRIPTION
  Set exclusive OR of two arrays.
    C = setxor(A,B) returns the data of A and B that are not in their
    intersection (the symmetric difference), with no repetitions. That is,
    setxor(3f) returns the data that occurs in A or B, but not both. C is in
    sorted order.

OPTIONS
  A input array

  B input array

  setOrder
    May be "sort" or "stable"

EXAMPLE
  sample program:

     program demo_setxor
     use M_sets, only: setxor
     character(len=*),parameter :: g='(*(g0,1x))'
     integer, allocatable      :: A(:)
     integer, allocatable      :: B(:)

	write(*,g) 'SETXOR','Find values of A and B not in their intersection.'
	A = [5,1,3,3,3]
	B = [4,1,2]
	write(*,g) 'A=', A
	write(*,g) 'A=', B
	write(*,g) setxor(A,B)
	write(*,g) setxor(A,B,'stable')

     end program demo_setxor

  Results:

   > SETXOR Find values of A and B not in their intersection.
   > A= 5 1 3 3 3
   > A= 4 1 2
   > 2 3 4 5
   > 5 3 4 2


AUTHORS
  John S. Urban, 2023-07-20

LICENSE
  CC0-1.0



			       October 04, 2024 	       setxor(3m_sets)
union(3m_sets)							union(3m_sets)



NAME
  union(3f) - [M_sets] return union values in array A


SYNOPSIS
  union(A,B, setOrder)

DESCRIPTION
  Set union of two arrays.
    C = union(A,B) returns the combined data from A and B with no repetitions.
    C is in sorted order.

OPTIONS
  A input array

  B input array

  setOrder
    May be "sort" or "stable"

EXAMPLE
  sample program:

     program demo_union
     use M_sets, only: union
     character(len=*),parameter :: g='(*(g0,1x))'
     integer, allocatable      :: A(:)
     integer, allocatable      :: B(:)

	write(*,g) 'UNION', 'Find the union of vectors A and B.'
	A=[5, 7, 1]
	B=[3, 1, 1]
	write(*,g) 'A=', A
	write(*,g) 'B=', B
	write(*,g) union(A,B)

	A=[5, 5, 3]
	B=[1, 2, 5]
	write(*,g) 'A=', A
	write(*,g) 'B=', B
	write(*,g) union(A, B, 'sorted')
	write(*,g) union(A, B, 'stable')

     end program demo_union
  ``` Results:

   > UNION Find the union of vectors A and B.
   > A= 5 7 1
   > B= 3 1 1
   > 1 3 5 7
   > A= 5 5 3
   > B= 1 2 5
   > 1 2 3 5
   > 5 3 1 2


AUTHORS
  John S. Urban, 2023-07-20

LICENSE
  CC0-1.0



			       October 04, 2024 		union(3m_sets)
unique(3m_sets) 					       unique(3m_sets)



NAME
  unique(3f) - [M_sets] return unique values in array A


SYNOPSIS
  unique(A,setOrder)

DESCRIPTION
  Return unique values in array.
    C = unique(A) returns the same data as in A, but with no repetitions. C is
    in sorted order by default.

OPTIONS
  A input array to extract unique values from

  setOrder
    May be "sort" or "stable"

RETURNS
EXAMPLE
  sample program:

     program demo_unique
     use M_sets, only: unique
     character(len=*),parameter :: g='(*(g0,1x))'
     integer, allocatable      :: A(:)

	write(*,g) 'UNIQUE','Find the unique elements of vector A.'
	 A = [10, -10, 0, 1, 2, 3, 3, 2, 1, -10]
	 write(*,g) 'A=', A
	 write(*,g) unique(A)
	 write(*,g) unique(A, setOrder='stable')

     end program demo_unique

  Results:

   > UNIQUE Find the unique elements of vector A.
   > A= 10 -10 0 1 2 3 3 2 1 -10
   > -10 0 1 2 3 10
   > 10 -10 0 1 2 3


AUTHORS
  John S. Urban, 2023-07-20

LICENSE
  CC0-1.0



			       October 04, 2024 	       unique(3m_sets)
issorted(3m_sets)					     issorted(3m_sets)



NAME
  issorted(3f) - [M_sets] Report if A is sorted in ascending order or not.


SYNOPSIS
  issorted(A,setOrder)

DESCRIPTION
  Report if A is sorted in ascending order or not. TF = issorted(A) returns
  the logical scalar 1 (true) when the elements of A are listed in ascending
  order and 0 (false) otherwise.

OPTIONS
  A input array to test

RETURNS
  TF
    1 if input array A issorted in ascending order, 0 otherwise

EXAMPLE
  sample program:

     program demo_issorted
     use M_sets, only: issorted
     character(len=*),parameter :: g='(*(g0,1x))'
     integer, allocatable      :: A(:)

	write(*,g) 'ISSORTED','Find the issorted elements of vector A.'
	 A = [10, -10, 0, 1, 2, 3, 3, 2, 1, -10]
	 write(*,g) 'A=', A
	 write(*,g) issorted(A)
	 A = [-10, 10, 100, 201]
	 write(*,g) 'A=', A
	 write(*,g) issorted(A)

     end program demo_issorted

  Results:

   > ISSORTED Find the issorted elements of vector A.
   > A= 10 -10 0 1 2 3 3 2 1 -10
   > 0
   > A= -10 10 100 201
   > 1


AUTHORS
  John S. Urban, 2023-07-20

LICENSE
  CC0-1.0



			       October 04, 2024 	     issorted(3m_sets)
intersect(3m_sets)					    intersect(3m_sets)



NAME
  intersect(3f) - [M_sets] return intersect values in array A


SYNOPSIS
  intersect(A,B, setOrder)

DESCRIPTION
  Set intersection of two arrays.
    C = intersect(A,B) returns the data common to both A and B, with no
    repetitions. C is in sorted order by default.

OPTIONS
  A input array

  B input array

  setOrder
    May be "sort" or "stable"

EXAMPLE
  sample program:

       program demo_intersect
       use M_sets, only: unique, intersect, union, setdiff, ismember, setxor
       character(len=*),parameter :: g='(*(g0,1x))'
       integer, allocatable	 :: A(:)
       integer, allocatable	 :: B(:)

	  write(*,g) 'INTERSECT', 'Find the values common to both A and B.'
	   A=[7, 1, 7, 7, 4]
	   B=[7, 0, 4, 4, 0]
	   write(*,g) 'A=', A
	   write(*,g) 'B=', B
	   write(*,g) intersect(A, B)
	   write(*,g) intersect(A, B, setOrder='stable')
       end program demo_intersect

  Results:

   > INTERSECT Find the values common to both A and B.
   > A= 7 1 7 7 4
   > B= 7 0 4 4 0
   > 4 7
   > 7 4


AUTHORS
  John S. Urban, 2023-07-20

LICENSE
  CC0-1.0



			       October 04, 2024 	    intersect(3m_sets)
